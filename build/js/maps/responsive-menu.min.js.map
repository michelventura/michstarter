{"version":3,"sources":["responsive-menu.js"],"names":["genesisMenuParams","genesis_responsive_menu","genesisMenusUnchecked","menuClasses","genesisMenus","menusToCombine","document","$","undefined","_addMenuButtons","toggleButtons","_getMenuSelectorString","find","before","submenu","menusToToggle","others","concat","menu","_addResponsiveMenuClass","addClass","responsiveMenuClass","_doResize","buttons","attr","_maybeClose","_superfishToggle","_changeSkipLink","_combineMenus","_addClassID","$this","this","nav","next","match","primaryMenu","combinedMenus","filter","index","_getDisplayValue","each","key","value","replace","appendTo","hide","show","removeClass","_mainmenuToggle","_toggleAria","toggleClass","slideToggle","_submenuToggle","closest","siblings","subMenuButtonClass","slideUp","_superfish","$args","superfish","delay","animation","opacity","height","dropShadows","speed","menuToggleList","_getAllMenusArray","length","newValue","startLink","endLink","$item","link","mainMenuButtonClass","$id","element","getElementById","window","getComputedStyle","getPropertyValue","attribute","itemArray","map","join","menuList","push","valueOf","group","menuString","$menu","newString","combine","genesisMenu","init","menuIconClass","subMenuIconClass","class","aria-expanded","aria-pressed","role","append","mainMenu","text","subMenu","on","triggerHandler","ready","jQuery"],"mappings":"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","file":"../responsive-menu.min.js","sourcesContent":["/**\n * This script adds the accessibility-ready responsive menus Genesis Framework child themes.\n *\n * @author StudioPress\n * @link https://github.com/copyblogger/responsive-menus\n * @version 1.1.2\n * @license GPL-2.0+\n */\n\nvar genesisMenuParams = typeof genesis_responsive_menu === 'undefined' ? '' : genesis_responsive_menu,\n    genesisMenusUnchecked = genesisMenuParams.menuClasses,\n    genesisMenus = {},\n    menusToCombine = [];\n\n(function(document, $, undefined) {\n\n    'use strict';\n\n    /**\n     * Validate the menus passed by the theme with what's being loaded on the page,\n     * and pass the new and accurate information to our new data.\n     * @param {genesisMenusUnchecked} Raw data from the localized script in the theme.\n     * @return {array} genesisMenus array gets populated with updated data.\n     * @return {array} menusToCombine array gets populated with relevant data.\n     */\n    $.each(genesisMenusUnchecked, function(group) {\n\n        // Mirror our group object to populate.\n        genesisMenus[group] = [];\n\n        // Loop through each instance of the specified menu on the page.\n        $.each(this, function(key, value) {\n\n            var menuString = value,\n                $menu = $(value);\n\n            // If there is more than one instance, append the index and update array.\n            if ($menu.length > 1) {\n\n                $.each($menu, function(key, value) {\n\n                    var newString = menuString + '-' + key;\n\n                    $(this).addClass(newString.replace('.', ''));\n\n                    genesisMenus[group].push(newString);\n\n                    if ('combine' === group) {\n                        menusToCombine.push(newString);\n                    }\n\n                });\n\n            } else if ($menu.length == 1) {\n\n                genesisMenus[group].push(menuString);\n\n                if ('combine' === group) {\n                    menusToCombine.push(menuString);\n                }\n\n            }\n\n        });\n\n    });\n\n    // Make sure there is something to use for the 'others' array.\n    if (typeof genesisMenus.others == 'undefined') {\n        genesisMenus.others = [];\n    }\n\n    // If there's only one menu on the page for combining, push it to the 'others' array and nullify our 'combine' variable.\n    if (menusToCombine.length == 1) {\n        genesisMenus.others.push(menusToCombine[0]);\n        genesisMenus.combine = null;\n        menusToCombine = null;\n    }\n\n    var genesisMenu = {},\n        mainMenuButtonClass = 'menu-toggle',\n        subMenuButtonClass = 'sub-menu-toggle',\n        responsiveMenuClass = 'genesis-responsive-menu';\n\n    // Initialize.\n    genesisMenu.init = function() {\n\n        // Exit early if there are no menus to do anything.\n        if ($(_getAllMenusArray()).length == 0) {\n            return;\n        }\n\n        var menuIconClass = typeof genesisMenuParams.menuIconClass !== 'undefined' ? genesisMenuParams.menuIconClass : 'dashicons-before dashicons-menu',\n            subMenuIconClass = typeof genesisMenuParams.subMenuIconClass !== 'undefined' ? genesisMenuParams.subMenuIconClass : 'dashicons-before dashicons-arrow-down-alt2',\n            toggleButtons = {\n                menu: $('<button />', {\n                        'class': mainMenuButtonClass,\n                        'aria-expanded': false,\n                        'aria-pressed': false,\n                        'role': 'button'\n                    })\n                    .append(genesisMenuParams.mainMenu),\n                submenu: $('<button />', {\n                        'class': subMenuButtonClass,\n                        'aria-expanded': false,\n                        'aria-pressed': false,\n                        'role': 'button'\n                    })\n                    .append($('<span />', {\n                        'class': 'screen-reader-text',\n                        'text': genesisMenuParams.subMenu\n                    }))\n            };\n\n        // Add the responsive menu class to the active menus.\n        _addResponsiveMenuClass();\n\n        // Add the main nav button to the primary menu, or exit the plugin.\n        _addMenuButtons(toggleButtons);\n\n        // Setup additional classes.\n        $('.' + mainMenuButtonClass).addClass(menuIconClass);\n        $('.' + subMenuButtonClass).addClass(subMenuIconClass);\n        $('.' + mainMenuButtonClass).on('click.genesisMenu-mainbutton', _mainmenuToggle).each(_addClassID);\n        $('.' + subMenuButtonClass).on('click.genesisMenu-subbutton', _submenuToggle);\n        $(window).on('resize.genesisMenu', _doResize).triggerHandler('resize.genesisMenu');\n    };\n\n    /**\n     * Add menu toggle button to appropriate menus.\n     * @param {toggleButtons} Object of menu buttons to use for toggles.\n     */\n    function _addMenuButtons(toggleButtons) {\n\n        // Apply sub menu toggle to each sub-menu found in the menuList.\n        $(_getMenuSelectorString(genesisMenus)).find('.sub-menu').before(toggleButtons.submenu);\n\n\n        if (menusToCombine !== null) {\n\n            var menusToToggle = genesisMenus.others.concat(menusToCombine[0]);\n\n            // Only add menu button the primary menu and navs NOT in the combine variable.\n            $(_getMenuSelectorString(menusToToggle)).before(toggleButtons.menu);\n\n        } else {\n\n            // Apply the main menu toggle to all menus in the list.\n            $(_getMenuSelectorString(genesisMenus.others)).before(toggleButtons.menu);\n\n        }\n\n    }\n\n    /**\n     * Add the responsive menu class.\n     */\n    function _addResponsiveMenuClass() {\n        $(_getMenuSelectorString(genesisMenus)).addClass(responsiveMenuClass);\n    }\n\n    /**\n     * Execute our responsive menu functions on window resizing.\n     */\n    function _doResize() {\n        var buttons = $('button[id^=\"genesis-mobile-\"]').attr('id');\n        if (typeof buttons === 'undefined') {\n            return;\n        }\n        _maybeClose(buttons);\n        _superfishToggle(buttons);\n        _changeSkipLink(buttons);\n        _combineMenus(buttons);\n    }\n\n    /**\n     * Add the nav- class of the related navigation menu as\n     * an ID to associated button (helps target specific buttons outside of context).\n     */\n    function _addClassID() {\n        var $this = $(this),\n            nav = $this.next('nav'),\n            id = 'class';\n\n        $this.attr('id', 'genesis-mobile-' + $(nav).attr(id).match(/nav-\\w*\\b/));\n    }\n\n    /**\n     * Combine our menus if the mobile menu is visible.\n     * @params buttons\n     */\n    function _combineMenus(buttons) {\n\n        // Exit early if there are no menus to combine.\n        if (menusToCombine == null) {\n            return;\n        }\n\n        // Split up the menus to combine based on order of appearance in the array.\n        var primaryMenu = menusToCombine[0],\n            combinedMenus = $(menusToCombine).filter(function(index) { if (index > 0) { return index; } });\n\n        // If the responsive menu is active, append items in 'combinedMenus' object to the 'primaryMenu' object.\n        if ('none' !== _getDisplayValue(buttons)) {\n\n            $.each(combinedMenus, function(key, value) {\n                $(value).find('.menu > li').addClass('moved-item-' + value.replace('.', '')).appendTo(primaryMenu + ' ul.genesis-nav-menu');\n            });\n            $(_getMenuSelectorString(combinedMenus)).hide();\n\n        } else {\n\n            $(_getMenuSelectorString(combinedMenus)).show();\n            $.each(combinedMenus, function(key, value) {\n                $('.moved-item-' + value.replace('.', '')).appendTo(value + ' ul.genesis-nav-menu').removeClass('moved-item-' + value.replace('.', ''));\n            });\n\n        }\n\n    }\n\n    /**\n     * Action to happen when the main menu button is clicked.\n     */\n    function _mainmenuToggle() {\n        var $this = $(this);\n        _toggleAria($this, 'aria-pressed');\n        _toggleAria($this, 'aria-expanded');\n        $this.toggleClass('activated');\n        $this.next('nav').slideToggle('fast');\n    }\n\n    /**\n     * Action for submenu toggles.\n     */\n    function _submenuToggle() {\n\n        var $this = $(this),\n            others = $this.closest('.menu-item').siblings();\n        _toggleAria($this, 'aria-pressed');\n        _toggleAria($this, 'aria-expanded');\n        $this.toggleClass('activated');\n        $this.next('.sub-menu').slideToggle('fast');\n\n        others.find('.' + subMenuButtonClass).removeClass('activated').attr('aria-pressed', 'false');\n        others.find('.sub-menu').slideUp('fast');\n\n    }\n\n    /**\n     * Activate/deactivate superfish.\n     * @params buttons\n     */\n    function _superfishToggle(buttons) {\n        var _superfish = $('.' + responsiveMenuClass + ' .js-superfish'),\n            $args = 'destroy';\n        if (typeof _superfish.superfish !== 'function') {\n            return;\n        }\n        if ('none' === _getDisplayValue(buttons)) {\n            $args = {\n                'delay': 100,\n                'animation': { 'opacity': 'show', 'height': 'show' },\n                'dropShadows': false,\n                'speed': 'fast'\n            };\n        }\n        _superfish.superfish($args);\n    }\n\n    /**\n     * Modify skip link to match mobile buttons.\n     * @param buttons\n     */\n    function _changeSkipLink(buttons) {\n\n        // Start with an empty array.\n        var menuToggleList = _getAllMenusArray();\n\n        // Exit out if there are no menu items to update.\n        if (!$(menuToggleList).length > 0) {\n            return;\n        }\n\n        $.each(menuToggleList, function(key, value) {\n\n            var newValue = value.replace('.', ''),\n                startLink = 'genesis-' + newValue,\n                endLink = 'genesis-mobile-' + newValue;\n\n            if ('none' == _getDisplayValue(buttons)) {\n                startLink = 'genesis-mobile-' + newValue;\n                endLink = 'genesis-' + newValue;\n            }\n\n            var $item = $('.genesis-skip-link a[href=\"#' + startLink + '\"]');\n\n            if (menusToCombine !== null && value !== menusToCombine[0]) {\n                $item.toggleClass('skip-link-hidden');\n            }\n\n            if ($item.length > 0) {\n                var link = $item.attr('href');\n                link = link.replace(startLink, endLink);\n\n                $item.attr('href', link);\n            } else {\n                return;\n            }\n\n        });\n\n    }\n\n    /**\n     * Close all the menu toggles if buttons are hidden.\n     * @param buttons\n     */\n    function _maybeClose(buttons) {\n        if ('none' !== _getDisplayValue(buttons)) {\n            return true;\n        }\n\n        $('.' + mainMenuButtonClass + ', .' + responsiveMenuClass + ' .sub-menu-toggle')\n            .removeClass('activated')\n            .attr('aria-expanded', false)\n            .attr('aria-pressed', false);\n\n        $('.' + responsiveMenuClass + ', ' + responsiveMenuClass + ' .sub-menu')\n            .attr('style', '');\n    }\n\n    /**\n     * Generic function to get the display value of an element.\n     * @param  {id} $id ID to check\n     * @return {string}     CSS value of display property\n     */\n    function _getDisplayValue($id) {\n        var element = document.getElementById($id),\n            style = window.getComputedStyle(element);\n        return style.getPropertyValue('display');\n    }\n\n    /**\n     * Toggle aria attributes.\n     * @param  {button} $this     passed through\n     * @param  {aria-xx} attribute aria attribute to toggle\n     * @return {bool}           from _ariaReturn\n     */\n    function _toggleAria($this, attribute) {\n        $this.attr(attribute, function(index, value) {\n            return 'false' === value;\n        });\n    }\n\n    /**\n     * Helper function to return a comma separated string of menu selectors.\n     * @param {itemArray} Array of menu items to loop through.\n     * @param {ignoreSecondary} boolean of whether to ignore the 'secondary' menu item.\n     * @return {string} Comma-separated string.\n     */\n    function _getMenuSelectorString(itemArray) {\n\n        var itemString = $.map(itemArray, function(value, key) {\n            return value;\n        });\n\n        return itemString.join(',');\n\n    }\n\n    /**\n     * Helper function to return a group array of all the menus in\n     * both the 'others' and 'combine' arrays.\n     * @return {array} Array of all menu items as class selectors.\n     */\n    function _getAllMenusArray() {\n\n        // Start with an empty array.\n        var menuList = [];\n\n        // If there are menus in the 'menusToCombine' array, add them to 'menuList'.\n        if (menusToCombine !== null) {\n\n            $.each(menusToCombine, function(key, value) {\n                menuList.push(value.valueOf());\n            });\n\n        }\n\n        // Add menus in the 'others' array to 'menuList'.\n        $.each(genesisMenus.others, function(key, value) {\n            menuList.push(value.valueOf());\n        });\n\n        if (menuList.length > 0) {\n            return menuList;\n        } else {\n            return null;\n        }\n\n    }\n\n    $(document).ready(function() {\n\n        if (_getAllMenusArray() !== null) {\n\n            genesisMenu.init();\n\n        }\n\n    });\n\n})(document, jQuery);"]}