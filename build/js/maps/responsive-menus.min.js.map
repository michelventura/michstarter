{"version":3,"sources":["responsive-menus.js"],"names":["genesisMenuParams","genesis_responsive_menu","genesisMenusUnchecked","menuClasses","genesisMenus","menusToCombine","document","$","undefined","_addMenuButtons","toggleButtons","_getMenuSelectorString","find","before","submenu","menusToToggle","others","concat","menu","_addResponsiveMenuClass","addClass","responsiveMenuClass","_doResize","buttons","attr","_maybeClose","_superfishToggle","_changeSkipLink","_combineMenus","_addClassID","$this","this","nav","next","match","primaryMenu","combinedMenus","filter","index","_getDisplayValue","each","key","value","replace","appendTo","hide","show","removeClass","_mainmenuToggle","_toggleAria","toggleClass","slideToggle","_submenuToggle","closest","siblings","subMenuButtonClass","slideUp","_superfish","$args","superfish","delay","animation","opacity","height","dropShadows","speed","menuToggleList","_getAllMenusArray","length","newValue","startLink","endLink","$item","link","mainMenuButtonClass","$id","element","getElementById","window","getComputedStyle","getPropertyValue","attribute","itemArray","map","join","menuList","push","valueOf","group","menuString","$menu","newString","combine","genesisMenu","init","menuIconClass","subMenuIconClass","class","aria-expanded","aria-pressed","role","append","mainMenu","text","subMenu","on","triggerHandler","ready","jQuery"],"mappings":"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","file":"../responsive-menus.min.js","sourcesContent":["/**\n * This script adds the accessibility-ready responsive menus Genesis Framework child themes.\n *\n * @author StudioPress\n * @link https://github.com/copyblogger/responsive-menus\n * @version 1.1.2\n * @license GPL-2.0+\n */\n\nvar genesisMenuParams      = typeof genesis_responsive_menu === 'undefined' ? '' : genesis_responsive_menu,\n\tgenesisMenusUnchecked  = genesisMenuParams.menuClasses,\n\tgenesisMenus           = {},\n\tmenusToCombine         = [];\n\n( function ( document, $, undefined ) {\n\n\t'use strict';\n\n\t/**\n\t * Validate the menus passed by the theme with what's being loaded on the page,\n\t * and pass the new and accurate information to our new data.\n\t * @param {genesisMenusUnchecked} Raw data from the localized script in the theme.\n\t * @return {array} genesisMenus array gets populated with updated data.\n\t * @return {array} menusToCombine array gets populated with relevant data.\n\t */\n\t$.each( genesisMenusUnchecked, function( group ) {\n\n\t\t// Mirror our group object to populate.\n\t\tgenesisMenus[group] = [];\n\n\t\t// Loop through each instance of the specified menu on the page.\n\t\t$.each( this, function( key, value ) {\n\n\t\t\tvar menuString = value,\n\t\t\t\t$menu      = $(value);\n\n\t\t\t// If there is more than one instance, append the index and update array.\n\t\t\tif ( $menu.length > 1 ) {\n\n\t\t\t\t$.each( $menu, function( key, value ) {\n\n\t\t\t\t\tvar newString = menuString + '-' + key;\n\n\t\t\t\t\t$(this).addClass( newString.replace('.','') );\n\n\t\t\t\t\tgenesisMenus[group].push( newString );\n\n\t\t\t\t\tif ( 'combine' === group ) {\n\t\t\t\t\t\tmenusToCombine.push( newString );\n\t\t\t\t\t}\n\n\t\t\t\t});\n\n\t\t\t} else if ( $menu.length == 1 ) {\n\n\t\t\t\tgenesisMenus[group].push( menuString );\n\n\t\t\t\tif ( 'combine' === group ) {\n\t\t\t\t\tmenusToCombine.push( menuString );\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t});\n\n\t});\n\n\t// Make sure there is something to use for the 'others' array.\n\tif ( typeof genesisMenus.others == 'undefined' ) {\n\t\tgenesisMenus.others = [];\n\t}\n\n\t// If there's only one menu on the page for combining, push it to the 'others' array and nullify our 'combine' variable.\n\tif ( menusToCombine.length == 1 ) {\n\t\tgenesisMenus.others.push( menusToCombine[0] );\n\t\tgenesisMenus.combine = null;\n\t\tmenusToCombine = null;\n\t}\n\n\tvar genesisMenu         = {},\n\t\tmainMenuButtonClass = 'menu-toggle',\n\t\tsubMenuButtonClass  = 'sub-menu-toggle',\n\t\tresponsiveMenuClass = 'genesis-responsive-menu';\n\n\t// Initialize.\n\tgenesisMenu.init = function() {\n\n\t\t// Exit early if there are no menus to do anything.\n\t\tif ( $( _getAllMenusArray() ).length == 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar menuIconClass     = typeof genesisMenuParams.menuIconClass !== 'undefined' ? genesisMenuParams.menuIconClass : 'dashicons-before dashicons-menu',\n\t\t\tsubMenuIconClass  = typeof genesisMenuParams.subMenuIconClass !== 'undefined' ? genesisMenuParams.subMenuIconClass : 'dashicons-before dashicons-arrow-down-alt2',\n\t\t\ttoggleButtons     = {\n\t\t\t\tmenu : $( '<button />', {\n\t\t\t\t\t'class' : mainMenuButtonClass,\n\t\t\t\t\t'aria-expanded' : false,\n\t\t\t\t\t'aria-pressed' : false,\n\t\t\t\t\t'role' : 'button'\n\t\t\t\t\t} )\n\t\t\t\t\t.append( genesisMenuParams.mainMenu ),\n\t\t\t\tsubmenu : $( '<button />', {\n\t\t\t\t\t'class' : subMenuButtonClass,\n\t\t\t\t\t'aria-expanded' : false,\n\t\t\t\t\t'aria-pressed' : false,\n\t\t\t\t\t'role' : 'button'\n\t\t\t\t\t} )\n\t\t\t\t\t.append( $( '<span />', {\n\t\t\t\t\t\t'class' : 'screen-reader-text',\n\t\t\t\t\t\t'text' : genesisMenuParams.subMenu\n\t\t\t\t\t} ) )\n\t\t\t};\n\n\t\t// Add the responsive menu class to the active menus.\n\t\t_addResponsiveMenuClass();\n\n\t\t// Add the main nav button to the primary menu, or exit the plugin.\n\t\t_addMenuButtons( toggleButtons );\n\n\t\t// Setup additional classes.\n\t\t$( '.' + mainMenuButtonClass ).addClass( menuIconClass );\n\t\t$( '.' + subMenuButtonClass ).addClass( subMenuIconClass );\n\t\t$( '.' + mainMenuButtonClass ).on( 'click.genesisMenu-mainbutton', _mainmenuToggle ).each( _addClassID );\n\t\t$( '.' + subMenuButtonClass ).on( 'click.genesisMenu-subbutton', _submenuToggle );\n\t\t$( window ).on( 'resize.genesisMenu', _doResize ).triggerHandler( 'resize.genesisMenu' );\n\t};\n\n\t/**\n\t * Add menu toggle button to appropriate menus.\n\t * @param {toggleButtons} Object of menu buttons to use for toggles.\n\t */\n\tfunction _addMenuButtons( toggleButtons ) {\n\n\t\t// Apply sub menu toggle to each sub-menu found in the menuList.\n\t\t$( _getMenuSelectorString( genesisMenus ) ).find( '.sub-menu' ).before( toggleButtons.submenu );\n\n\n\t\tif ( menusToCombine !== null ) {\n\n\t\t\tvar menusToToggle = genesisMenus.others.concat( menusToCombine[0] );\n\n\t\t \t// Only add menu button the primary menu and navs NOT in the combine variable.\n\t\t \t$( _getMenuSelectorString( menusToToggle ) ).before( toggleButtons.menu );\n\n\t\t} else {\n\n\t\t\t// Apply the main menu toggle to all menus in the list.\n\t\t\t$( _getMenuSelectorString( genesisMenus.others ) ).before( toggleButtons.menu );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Add the responsive menu class.\n\t */\n\tfunction _addResponsiveMenuClass() {\n\t\t$( _getMenuSelectorString( genesisMenus ) ).addClass( responsiveMenuClass );\n\t}\n\n\t/**\n\t * Execute our responsive menu functions on window resizing.\n\t */\n\tfunction _doResize() {\n\t\tvar buttons   = $( 'button[id^=\"genesis-mobile-\"]' ).attr( 'id' );\n\t\tif ( typeof buttons === 'undefined' ) {\n\t\t\treturn;\n\t\t}\n\t\t_maybeClose( buttons );\n\t\t_superfishToggle( buttons );\n\t\t_changeSkipLink( buttons );\n\t\t_combineMenus( buttons );\n\t}\n\n\t/**\n\t * Add the nav- class of the related navigation menu as\n\t * an ID to associated button (helps target specific buttons outside of context).\n\t */\n\tfunction _addClassID() {\n\t\tvar $this = $( this ),\n\t\t\tnav   = $this.next( 'nav' ),\n\t\t\tid    = 'class';\n\n\t\t$this.attr( 'id', 'genesis-mobile-' + $( nav ).attr( id ).match( /nav-\\w*\\b/ ) );\n\t}\n\n\t/**\n\t * Combine our menus if the mobile menu is visible.\n\t * @params buttons\n\t */\n\tfunction _combineMenus( buttons ){\n\n\t\t// Exit early if there are no menus to combine.\n\t\tif ( menusToCombine == null ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Split up the menus to combine based on order of appearance in the array.\n\t\tvar primaryMenu   = menusToCombine[0],\n\t\t\tcombinedMenus = $( menusToCombine ).filter( function(index) { if ( index > 0 ) { return index; } });\n\n\t\t// If the responsive menu is active, append items in 'combinedMenus' object to the 'primaryMenu' object.\n\t\tif ( 'none' !== _getDisplayValue( buttons ) ) {\n\n\t\t\t$.each( combinedMenus, function( key, value ) {\n\t\t\t\t$(value).find( '.menu > li' ).addClass( 'moved-item-' + value.replace( '.','' ) ).appendTo( primaryMenu + ' ul.genesis-nav-menu' );\n\t\t\t});\n\t\t\t$( _getMenuSelectorString( combinedMenus ) ).hide();\n\n\t\t} else {\n\n\t\t\t$( _getMenuSelectorString( combinedMenus ) ).show();\n\t\t\t$.each( combinedMenus, function( key, value ) {\n\t\t\t\t$( '.moved-item-' + value.replace( '.','' ) ).appendTo( value + ' ul.genesis-nav-menu' ).removeClass( 'moved-item-' + value.replace( '.','' ) );\n\t\t\t});\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Action to happen when the main menu button is clicked.\n\t */\n\tfunction _mainmenuToggle() {\n\t\tvar $this = $( this );\n\t\t_toggleAria( $this, 'aria-pressed' );\n\t\t_toggleAria( $this, 'aria-expanded' );\n\t\t$this.toggleClass( 'activated' );\n\t\t$this.next( 'nav' ).slideToggle( 'fast' );\n\t}\n\n\t/**\n\t * Action for submenu toggles.\n\t */\n\tfunction _submenuToggle() {\n\n\t\tvar $this  = $( this ),\n\t\t\tothers = $this.closest( '.menu-item' ).siblings();\n\t\t_toggleAria( $this, 'aria-pressed' );\n\t\t_toggleAria( $this, 'aria-expanded' );\n\t\t$this.toggleClass( 'activated' );\n\t\t$this.next( '.sub-menu' ).slideToggle( 'fast' );\n\n\t\tothers.find( '.' + subMenuButtonClass ).removeClass( 'activated' ).attr( 'aria-pressed', 'false' );\n\t\tothers.find( '.sub-menu' ).slideUp( 'fast' );\n\n\t}\n\n\t/**\n\t * Activate/deactivate superfish.\n\t * @params buttons\n\t */\n\tfunction _superfishToggle( buttons ) {\n\t\tvar _superfish = $( '.' + responsiveMenuClass + ' .js-superfish' ),\n\t\t\t$args      = 'destroy';\n\t\tif ( typeof _superfish.superfish !== 'function' ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( 'none' === _getDisplayValue( buttons ) ) {\n\t\t\t$args = {\n\t\t\t\t'delay': 100,\n\t\t\t\t'animation': {'opacity': 'show', 'height': 'show'},\n\t\t\t\t'dropShadows': false,\n\t\t\t\t'speed': 'fast'\n\t\t\t};\n\t\t}\n\t\t_superfish.superfish( $args );\n\t}\n\n\t/**\n\t * Modify skip link to match mobile buttons.\n\t * @param buttons\n\t */\n\tfunction _changeSkipLink( buttons ) {\n\n\t\t// Start with an empty array.\n\t\tvar menuToggleList = _getAllMenusArray();\n\n\t\t// Exit out if there are no menu items to update.\n\t\tif ( ! $( menuToggleList ).length > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$.each( menuToggleList, function ( key, value ) {\n\n\t\t\tvar newValue  = value.replace( '.', '' ),\n\t\t\t\tstartLink = 'genesis-' + newValue,\n\t\t\t\tendLink   = 'genesis-mobile-' + newValue;\n\n\t\t\tif ( 'none' == _getDisplayValue( buttons ) ) {\n\t\t\t\tstartLink = 'genesis-mobile-' + newValue;\n\t\t\t\tendLink   = 'genesis-' + newValue;\n\t\t\t}\n\n\t\t\tvar $item = $( '.genesis-skip-link a[href=\"#' + startLink + '\"]' );\n\n\t\t\tif ( menusToCombine !== null && value !== menusToCombine[0] ) {\n\t\t\t\t$item.toggleClass( 'skip-link-hidden' );\n\t\t\t}\n\n\t\t\tif ( $item.length > 0 ) {\n\t\t\t\tvar link  = $item.attr( 'href' );\n\t\t\t\t\tlink  = link.replace( startLink, endLink );\n\n\t\t\t\t$item.attr( 'href', link );\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t});\n\n\t}\n\n\t/**\n\t * Close all the menu toggles if buttons are hidden.\n\t * @param buttons\n\t */\n\tfunction _maybeClose( buttons ) {\n\t\tif ( 'none' !== _getDisplayValue( buttons ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t$( '.' + mainMenuButtonClass + ', .' + responsiveMenuClass + ' .sub-menu-toggle' )\n\t\t\t.removeClass( 'activated' )\n\t\t\t.attr( 'aria-expanded', false )\n\t\t\t.attr( 'aria-pressed', false );\n\n\t\t$( '.' + responsiveMenuClass + ', ' + responsiveMenuClass + ' .sub-menu' )\n\t\t\t.attr( 'style', '' );\n\t}\n\n\t/**\n\t * Generic function to get the display value of an element.\n\t * @param  {id} $id ID to check\n\t * @return {string}     CSS value of display property\n\t */\n\tfunction _getDisplayValue( $id ) {\n\t\tvar element = document.getElementById( $id ),\n\t\t\tstyle   = window.getComputedStyle( element );\n\t\treturn style.getPropertyValue( 'display' );\n\t}\n\n\t/**\n\t * Toggle aria attributes.\n\t * @param  {button} $this     passed through\n\t * @param  {aria-xx} attribute aria attribute to toggle\n\t * @return {bool}           from _ariaReturn\n\t */\n\tfunction _toggleAria( $this, attribute ) {\n\t\t$this.attr( attribute, function( index, value ) {\n\t\t\treturn 'false' === value;\n\t\t});\n\t}\n\n\t/**\n\t * Helper function to return a comma separated string of menu selectors.\n\t * @param {itemArray} Array of menu items to loop through.\n\t * @param {ignoreSecondary} boolean of whether to ignore the 'secondary' menu item.\n\t * @return {string} Comma-separated string.\n\t */\n\tfunction _getMenuSelectorString( itemArray ) {\n\n\t\tvar itemString = $.map( itemArray, function( value, key ) {\n\t\t\treturn value;\n\t\t});\n\n\t\treturn itemString.join( ',' );\n\n\t}\n\n\t/**\n\t * Helper function to return a group array of all the menus in\n\t * both the 'others' and 'combine' arrays.\n\t * @return {array} Array of all menu items as class selectors.\n\t */\n\tfunction _getAllMenusArray() {\n\n\t\t// Start with an empty array.\n\t\tvar menuList = [];\n\n\t\t// If there are menus in the 'menusToCombine' array, add them to 'menuList'.\n\t\tif ( menusToCombine !== null ) {\n\n\t\t\t$.each( menusToCombine, function( key, value ) {\n\t\t\t\tmenuList.push( value.valueOf() );\n\t\t\t});\n\n\t\t}\n\n\t\t// Add menus in the 'others' array to 'menuList'.\n\t\t$.each( genesisMenus.others, function( key, value ) {\n\t\t\tmenuList.push( value.valueOf() );\n\t\t});\n\n\t\tif ( menuList.length > 0 ) {\n\t\t\treturn menuList;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n\t$(document).ready(function () {\n\n\t\tif ( _getAllMenusArray() !== null ) {\n\n\t\t\tgenesisMenu.init();\n\n\t\t}\n\n\t});\n\n})( document, jQuery );\n"]}